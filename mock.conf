# Sampling time step (s)
T = 0.0;

# The NMPC prediction horizon length
N = 2;

# The NMPC control horizon
C = 0;

# State space dimensionality
m = 1;

# Control space dimensionality
n = 1;

# dg is the gradient mixing factor which controls the rate of decent to
# the optimal control horizon. This factor affects the stability of
# convergence, so it must be set with caution. If heuristic convergence
# tracking is implimented, then this value will be adjusted
# automatically during run time, and the initialization value is just a
# 3 safe starting value
dg = 0.0;

# The cruising speed is the desired safe speed for the robot to
# follow a line. It should be fast enough to get quickly through
# the rooms, but not so fast that the robot will topple if it must
# make quick course corrections
cruising_speed = 0.0;

# Tolerance in meters for which we consider ourselves at the target
tgttol = 0.0;

# eps is the epsilon constant in the point obstacle potential
eps = 0.0;

# R is the weighting matrix associated with the cost term of the
# control input vector
R = 0.0;

# Q0 is the weighting matrix associated with the tracking error in
# the last state in the prediction horizon
Q0 = 0.0, 0.0;

# Q is the weighting matrix associated with the cost term for the
# tracking error
Q = 0.0, 0.0;

# S is the weighting matrix associated with the cost term for the
# state vector
S = 0.0;

# tgt is a 2D column vector to the desired target
tgt = 0.0, 0.0;

# obst is a matrix containing a concatenated list of 2D column
# vectors of point obstacle coordinates.
obst = 0.0, 0.0;

# walls is an array containing a concatenated list of 2D column
# vectors of end point coordinates for line segements
walls = 0.0, 0.0, 0.0, 0.0;
